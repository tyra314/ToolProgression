buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mc_version}-${mod_version}"
group = "tyra314" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
def archiveGroup = group
archivesBaseName = "toolprogression"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace '@VERSION@', project.version
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replaceIn "ToolProgressionMod.java"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    useDepAts = true
}

repositories {
    maven { // Hwyla
        url 'http://tehnut.info/maven'
    }

    maven { // JEI
        url = "http://dvs1.progwml6.com/files/maven"
    }

    maven { // TConstruct
        url 'http://dvs1.progwml6.com/files/maven'
    }

    maven { // WAILA
        url 'http://mobiusstrip.eu/maven'
    }

    maven { // GameStages
        url 'https://maven.mcmoddev.com'
    }

    maven { // CurseForge
        url 'https://minecraft.curseforge.com/api/maven/'
    }
}

dependencies {
    deobfCompile "ex-nihilo-creatio:exnihilocreatio:1.12:0.1.5"
    deobfCompile "ex-compressum:ExCompressum_1.12.2:3.0.11"

    deobfCompile "slimeknights:TConstruct:${tc_version}"
    deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"

    deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}"

    //deobfCompile "mcp.mobius.waila:Waila:1.7.1_1.11.2"

    deobfCompile "net.darkhax.bookshelf:Bookshelf-${mc_version}:${bookshelf_version}"
    deobfCompile "net.darkhax.gamestages:GameStages-${mc_version}:${gamestages_version}"
    deobfCompile "net.darkhax.orestages:OreStages-${mc_version}:${orestages_version}"

    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    classifier "dev"

    manifest {
        attributes 'FMLAT': 'toolprogression_at.cfg'
        attributes 'Maven-Artifact': group + ':' + archivesBaseName + ':' + version
    }
}

reobf {
    coreJar {
        mappingType = 'SEARGE'
    }
}

task coreJar(type: Jar) {
    // Copy all compiled files and resources from the source set to the JAR
    // If you have additional source sets, add the same logic here
    from(sourceSets.main.output) {
        // Don't include the coremod in the main mod
        // If you have more coremod-related packages that aren't nested in the main one, add exclusions for them
        include 'tyra314/toolprogression/core/**'
    }
    manifest {
        attributes "FMLCorePlugin": 'tyra314.toolprogression.core.ToolProgressionPlugin'
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + ':' + version
    }

    // Add a classifier to the JAR ('-core' at the end of the file name)
    // Distinguishes the mod JAR from the shipped one
    classifier 'core'
    group = 'build'
}

task signCoreJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfCoreJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = coreJar.archivePath
        outputFile = coreJar.archivePath
    }
}


task signMainJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    dependsOn reobfJar
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.findProperty('keyStore')
        alias = project.findProperty('keyStoreAlias')
        storePass = project.findProperty('keyStorePass')
        keyPass = project.findProperty('keyStoreKeyPass')
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

build.dependsOn signMainJar
jar.dependsOn signCoreJar
jar {
    manifest {
        attributes 'ContainedDeps': 'META-INF/libraries' + '/' + coreJar.archivePath.name
        attributes 'FMLAT': 'toolprogression_at.cfg'
        attributes 'Maven-Artifact': archiveGroup + ':' + archivesBaseName + ':' + version
    }
    exclude 'tyra314/toolprogression/core/**'

    // Add the output of the mod JAR task to the main JAR for later extraction
    from(coreJar.archivePath.absolutePath) {
        include '*' // Due to the way Gradle's copy tasks work, we need this line for the JAR to get added
        into 'META-INF/libraries'
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

artifacts {
    archives deobfJar
}
