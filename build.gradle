buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "${mc_version}-${mod_version}"
group = "tyra314.toolprogression" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "toolprogression"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
    options.encoding = 'UTF-8'
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace '@VERSION@', project.version
    replace '@FINGERPRINT@', project.findProperty('signSHA1')
    replaceIn "ToolProgressionMod.java"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    useDepAts = true
}

repositories {
    maven { // Hwyla
        url 'http://tehnut.info/maven'
    }

    maven { // JEI
        url = "http://dvs1.progwml6.com/files/maven"
    }

    maven { // TConstruct
        url 'http://dvs1.progwml6.com/files/maven'
    }

    maven { // WAILA
        url 'http://mobiusstrip.eu/maven'
    }

    maven { // GameStages
        url 'https://maven.mcmoddev.com'
    }

    maven { // CurseForge
        url 'https://minecraft.curseforge.com/api/maven/'
    }
}

dependencies {
    deobfCompile "ex-nihilo-creatio:exnihilocreatio:1.12:0.1.5"
    deobfCompile "ex-compressum:ExCompressum_1.12.2:3.0.11"

    deobfCompile "slimeknights:TConstruct:${tc_version}"
    deobfCompile "slimeknights.mantle:Mantle:${mantle_version}"

    deobfCompile "mcp.mobius.waila:Hwyla:${hwyla_version}"

    //deobfCompile "mcp.mobius.waila:Waila:1.7.1_1.11.2"

    deobfCompile "net.darkhax.bookshelf:Bookshelf-${mc_version}:${bookshelf_version}"
    deobfCompile "net.darkhax.gamestages:GameStages-${mc_version}:${gamestages_version}"
    deobfCompile "net.darkhax.orestages:OreStages-${mc_version}:${orestages_version}"

    runtime "mezz.jei:jei_${mc_version}:${jei_version}"
}

task deobfJar(type: Jar, dependsOn: 'jar') {
    from sourceSets.main.output
    classifier "dev"
}
artifacts {
    archives deobfJar
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
}

jar {

    manifest {
        attributes 'FMLCorePluginContainsFMLMod': 'true',
                   'FMLCorePlugin': 'tyra314.toolprogression.core.ToolProgressionPlugin',
                   'FMLAT': 'toolprogression_at.cfg'
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

// Runs this task automatically when build is ran.
build.dependsOn signJar
